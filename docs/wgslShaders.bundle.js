"use strict";(self.webpackChunkmodel_viewer=self.webpackChunkmodel_viewer||[]).push([[126],{24371:(e,n,r)=>{r.r(n),r.d(n,{mmdOutlinePixelShader:()=>o}),r(39759),r(93226),r(97715),r(38780);const f="mmdOutlinePixelShader",i="\nuniform color: vec4f;\n#ifdef ALPHATEST\nvarying vUV: vec2;var diffuseSamplerSampler: sampler;var diffuseSampler: texture_2d<f32>;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\n@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (textureSample(diffuseSampler,diffuseSamplerSampler,fragmentInputs.vUV).a<0.4) {discard;}\n#endif\n#include<logDepthFragment>\nfragmentOutputs.color=uniforms.color;\n#define CUSTOM_FRAGMENT_MAIN_END\n}\n";r(69610).l.ShadersStoreWGSL[f]=i;const o={name:f,shader:i}},24399:(e,n,r)=>{r.r(n),r.d(n,{textureAlphaCheckerPixelShader:()=>o});const f="textureAlphaCheckerPixelShader",i="\nvar textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;varying vUv: vec2f;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {fragmentOutputs.color=vec4f(\nvec3f(1.0)-vec3f(textureSample(textureSampler,textureSamplerSampler,fragmentInputs.vUv).a),\n1.0\n);}\n";r(69610).l.ShadersStoreWGSL[f]=i;const o={name:f,shader:i}},61721:(e,n,r)=>{r.r(n),r.d(n,{textureAlphaCheckerVertexShader:()=>o});const f="textureAlphaCheckerVertexShader",i="\nattribute uv: vec2f;varying vUv: vec2f;@vertex\nfn main(input: VertexInputs)->FragmentInputs {vertexOutputs.vUv=vertexInputs.uv;vertexOutputs.position=vec4f(\n(vertexInputs.uv % 1.0)*2.0-1.0,\n0.0,\n1.0\n);}\n";r(69610).l.ShadersStoreWGSL[f]=i;const o={name:f,shader:i}},65485:(e,n,r)=>{r.r(n),r.d(n,{mmdOutlineVertexShader:()=>o}),r(32806),r(98900),r(76340),r(8217),r(77029),r(44559),r(93226),r(18258),r(9129),r(91277),r(65470),r(40242),r(85197),r(81482);const f="mmdOutlineVertexShader",i="\nattribute position: vec3f;attribute normal: vec3f;\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<clipPlaneVertexDeclaration>\nuniform offset: f32;\n#include<instancesDeclaration>\nuniform viewport: vec2f;uniform view: mat3x3f;uniform viewProjection: mat4x4f;\n#ifdef WORLDPOS_REQUIRED\nuniform inverseViewProjection: mat4x4f;\n#endif\n#ifdef ALPHATEST\nvarying vUV: vec2f;uniform diffuseMatrix: mat4x4f; \n#ifdef UV1\nattribute uv: vec2f;\n#endif\n#ifdef UV2\nattribute uv2: vec2f;\n#endif\n#endif\n#include<logDepthDeclaration>\n#define CUSTOM_VERTEX_DEFINITIONS\n@vertex\nfn main(input: VertexInputs)->FragmentInputs {var positionUpdated: vec3f=vertexInputs.position;var normalUpdated: vec3f=vertexInputs.normal;\n#ifdef UV1\nvar uvUpdated: vec2f=vertexInputs.uv;\n#endif\n#ifdef UV2\nvar uv2Updated: vec2f=vertexInputs.uv2;\n#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvar viewNormal: vec3f=uniforms.view*(mat3x3(finalWorld[0].xyz,finalWorld[1].xyz,finalWorld[2].xyz)*normalUpdated);var projectedPosition: vec4f=uniforms.viewProjection*finalWorld*vec4f(positionUpdated,1.0);var screenNormal: vec2f=normalize(viewNormal.xy);projectedPosition=vec4f(\nprojectedPosition.xy+(screenNormal/(uniforms.viewport*0.25/*0.5 */)*uniforms.offset*projectedPosition.w),\nprojectedPosition.z,\nprojectedPosition.w\n);vertexOutputs.position=projectedPosition;\n#ifdef WORLDPOS_REQUIRED\nvar worldPos: vec4f=uniforms.inverseViewProjection*projectedPosition;\n#endif\n#ifdef ALPHATEST\n#ifdef UV1\nvertexOutputs.vUV=(uniforms.diffuseMatrix*vec4f(uvUpdated,1.0,0.0)).xy;\n#endif\n#ifdef UV2\nvertexOutputs.vUV=(uniforms.diffuseMatrix*vec4f(uv2Updated,1.0,0.0)).xy;\n#endif\n#endif\n#include<clipPlaneVertex>\n#include<logDepthVertex>\n}\n";r(69610).l.ShadersStoreWGSL[f]=i;const o={name:f,shader:i}},76434:(e,n,r)=>{r.r(n),r.d(n,{MmdPluginMaterial:()=>l});var f=r(5662),i=r(56561);function o(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}var t=r(92461),a=r(59711);class l extends i.ZL{isCompatible(e){return e===f.w.WGSL}getCustomCode(e){if("vertex"===e){const e={};return e.CUSTOM_VERTEX_DEFINITIONS=t.B,e[`!${o("finalWorld=finalWorld*influence;")}`]=`\n${a.Z}\nfinalWorld=(finalWorld*influence);\n`,e}if("fragment"===e){const e={CUSTOM_FRAGMENT_DEFINITIONS:"\n#if defined(SPHERE_TEXTURE) && defined(NORMAL)\nvar sphereSamplerSampler: sampler;var sphereSampler: texture_2d<f32>;\n#endif\n#ifdef TOON_TEXTURE\nvar toonSamplerSampler: sampler;var toonSampler: texture_2d<f32>;\n#endif\n",CUSTOM_FRAGMENT_MAIN_BEGIN:"\n#ifdef TOON_TEXTURE\nvar toonNdl: vec3f;\n#endif\n"};e[`!${o("var diffuseColor: vec3f=uniforms.vDiffuseColor.rgb;")}`]="\n#ifdef APPLY_AMBIENT_COLOR_TO_DIFFUSE\nvar diffuseColor: vec3f=clamp(uniforms.vDiffuseColor.rgb+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0));\n#else\nvar diffuseColor: vec3f=(uniforms.vDiffuseColor.rgb);\n#endif\n",e[`!${o("var alpha: f32=uniforms.vDiffuseColor.a;")}`]="\n#ifdef CLAMP_ALPHA\nvar alpha: f32=clamp(uniforms.vDiffuseColor.a,0.0,1.0);\n#else\nvar alpha: f32=uniforms.vDiffuseColor.a;\n#endif\n",e[`!${o("baseColor=textureSample(diffuseSampler,diffuseSamplerSampler,fragmentInputs.vDiffuseUV+uvOffset);")}`]="\n#if defined(DIFFUSE) && defined(TEXTURE_COLOR)\nbaseColor=textureSample(diffuseSampler,diffuseSamplerSampler,(fragmentInputs.vDiffuseUV+uvOffset));baseColor=vec4f(\nmix(\nvec3f(1.0),\nbaseColor.rgb*uniforms.textureMultiplicativeColor.rgb,\nuniforms.textureMultiplicativeColor.a\n),\nbaseColor.a\n);baseColor=vec4f(\nclamp(\nbaseColor.rgb+(baseColor.rgb-vec3f(1.0))*uniforms.textureAdditiveColor.a,\nvec3f(0.0),\nvec3f(1.0)\n)+uniforms.textureAdditiveColor.rgb,\nbaseColor.a\n);\n#else\nbaseColor=textureSample(diffuseSampler,diffuseSamplerSampler,(fragmentInputs.vDiffuseUV+uvOffset));\n#endif\n",e[`!${o("struct lightingInfo\n{")}`]="\nstruct lightingInfo {\n#ifdef TOON_TEXTURE\n#ifndef NDOTL\nndl: f32,\n#endif\nisToon: f32,\n#endif\n",e[`!${o("result.diffuse=ndl*diffuseColor*attenuation;")}`]="\n#ifdef TOON_TEXTURE\nresult.diffuse=diffuseColor*attenuation;result.ndl=ndl;result.isToon=1.0;\n#elif defined(IGNORE_DIFFUSE_WHEN_TOON_TEXTURE_DISABLED)\nresult.diffuse=diffuseColor*attenuation;\n#else\nresult.diffuse=(ndl*diffuseColor*attenuation);\n#endif\n",e[`!${o("diffuseBase+=info.diffuse*shadow;")}`]="\n#ifdef TOON_TEXTURE\ntoonNdl=vec3f(clamp(info.ndl*shadow,0.02,0.98));toonNdl.r=textureSample(toonSampler,toonSamplerSampler,vec2f(0.5,toonNdl.r)).r;toonNdl.g=textureSample(toonSampler,toonSamplerSampler,vec2f(0.5,toonNdl.g)).g;toonNdl.b=textureSample(toonSampler,toonSamplerSampler,vec2f(0.5,toonNdl.b)).b;\n#ifdef TOON_TEXTURE_COLOR\ntoonNdl=mix(\nvec3f(1.0),\ntoonNdl*uniforms.toonTextureMultiplicativeColor.rgb,\nuniforms.toonTextureMultiplicativeColor.a\n);toonNdl=clamp(\ntoonNdl+(toonNdl-vec3f(1.0))*uniforms.toonTextureAdditiveColor.a,\nvec3f(0.0),\nvec3f(1.0)\n)+uniforms.toonTextureAdditiveColor.rgb;\n#endif\ndiffuseBase+=mix(info.diffuse*shadow,toonNdl*info.diffuse,info.isToon);\n#elif defined(IGNORE_DIFFUSE_WHEN_TOON_TEXTURE_DISABLED)\ndiffuseBase+=info.diffuse;\n#else\ndiffuseBase+=(info.diffuse*shadow);\n#endif\n";const n="\n#ifdef EMISSIVEASILLUMINATION\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\n#ifdef LINKEMISSIVEWITHDIFFUSE\nvar finalDiffuse: vec3f=clamp((diffuseBase+emissiveColor)*diffuseColor+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor+emissiveColor+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#endif\n#endif\n";return e[`!${o(n)}`]=`\n#ifdef APPLY_AMBIENT_COLOR_TO_DIFFUSE\n#ifdef EMISSIVEASILLUMINATION\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\n#ifdef LINKEMISSIVEWITHDIFFUSE\nvar finalDiffuse: vec3f=clamp((diffuseBase+emissiveColor)*diffuseColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor+emissiveColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#endif\n#endif\n#else\n${n.replace("diffuseBase","(diffuseBase)")}#endif\n`,e.CUSTOM_FRAGMENT_BEFORE_FOG="\n#if defined(NORMAL) && defined(SPHERE_TEXTURE)\nvar viewSpaceNormal: vec3f=normalize(mat3x3f(scene.view[0].xyz,scene.view[1].xyz,scene.view[2].xyz)*fragmentInputs.vNormalW);var sphereUV: vec2f=viewSpaceNormal.xy*0.5+0.5;var sphereReflectionColor: vec4f=textureSample(sphereSampler,sphereSamplerSampler,sphereUV);\n#ifdef SPHERE_TEXTURE_COLOR\nsphereReflectionColor=vec4f(\nmix(\nvec3f(1.0),\nsphereReflectionColor.rgb*uniforms.sphereTextureMultiplicativeColor.rgb,\nuniforms.sphereTextureMultiplicativeColor.a\n),\nsphereReflectionColor.a\n);sphereReflectionColor=vec4f(\nclamp(\nsphereReflectionColor.rgb+(sphereReflectionColor.rgb-vec3f(1.0))*uniforms.sphereTextureAdditiveColor.a,\nvec3f(0.0),\nvec3f(1.0)\n)+uniforms.sphereTextureAdditiveColor.rgb,\nsphereReflectionColor.a\n);\n#endif\nsphereReflectionColor=vec4f(sphereReflectionColor.rgb*diffuseBase,sphereReflectionColor.a);\n#ifdef SPHERE_TEXTURE_BLEND_MODE_MULTIPLY\ncolor*=sphereReflectionColor;\n#elif defined(SPHERE_TEXTURE_BLEND_MODE_ADD)\ncolor=vec4f(color.rgb+sphereReflectionColor.rgb,color.a);\n#endif\n#endif\n",e}return null}}}}]);