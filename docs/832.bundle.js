"use strict";(self.webpackChunkmodel_viewer=self.webpackChunkmodel_viewer||[]).push([[832],{15832:(t,e,n)=>{n.r(e),n.d(e,{_DxBmpTextureLoader:()=>a});var i=n(32206),r=n(96125);class a{supportCascades=!1;loadCubeData(){throw".dxbmp not supported in Cube"}static _HeaderExtension=new Uint8Array([0,0,255,0,0,255,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);_injectHeader(t){const e=new DataView(t.buffer,t.byteOffset,t.byteLength);if(19778!==e.getUint16(0,!0))return t;if(40!==e.getUint32(14,!0))return t;if(32!==e.getUint16(28,!0))return t;if(0!==e.getUint32(30,!0))return t;const n=new Uint8Array(t.byteLength+68);n.set(new Uint8Array(t.buffer,t.byteOffset,54),0),n.set(new Uint8Array(t.buffer,t.byteOffset+54,t.byteLength-54),122);const i=new DataView(n.buffer,n.byteOffset,n.byteLength),r=i.getUint32(2,!0);i.setUint32(2,r+68,!0);const s=i.getUint32(10,!0);return i.setUint32(10,s+68,!0),i.setUint32(14,108,!0),i.setUint32(30,3,!0),n.set(a._HeaderExtension,54),n}_workingCanvas=null;_workingContext=null;_prepareTextureProcess(t,e){const n=t.getEngine();if(!this._workingCanvas&&(this._workingCanvas=document.createElement("canvas"),this._workingContext=this._workingCanvas.getContext("2d"),!this._workingContext))throw new Error("Unable to get 2d context");const i=this._workingCanvas,a=this._workingContext;i.width=e.width,i.height=e.height,a.drawImage(e,0,0);const s=a.getImageData(0,0,e.width,e.height).data;t.type=r.Y.TEXTURETYPE_UNSIGNED_BYTE,t.format=r.Y.TEXTUREFORMAT_RGBA,n._uploadDataToTextureDirectly(t,s,void 0,void 0,void 0,!0)}loadData(t,e,n){const r=this._injectHeader(t),a=e.getEngine();i.$._FileToolsLoadImage(r,(t=>{n(t.width,t.height,!0,!1,(()=>this._prepareTextureProcess(e,t)))}),((t,e)=>{n(1,1,!1,!1,(()=>{}),!0)}),null,void 0,e.invertY&&a._features.needsInvertingBitmap?{imageOrientation:"flipY"}:void 0)}}}}]);