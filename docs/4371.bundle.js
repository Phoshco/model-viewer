"use strict";(self.webpackChunkmodel_viewer=self.webpackChunkmodel_viewer||[]).push([[4371],{4371:(n,e,t)=>{t.r(e),t.d(e,{mmdOutlinePixelShader:()=>i}),t(9759),t(3226),t(7715),t(8780);const r="mmdOutlinePixelShader",a="\nuniform color: vec4f;\n\n#ifdef ALPHATEST\nvarying vUV: vec2;\nvar diffuseSamplerSampler: sampler;\nvar diffuseSampler: texture_2d<f32>;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n\n\n#define CUSTOM_FRAGMENT_DEFINITIONS\n\n@fragment\nfn main(input: FragmentInputs) -> FragmentOutputs {\n\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\n\n#include<clipPlaneFragment>\n\n#ifdef ALPHATEST\n    if (textureSample(diffuseSampler, diffuseSamplerSampler, fragmentInputs.vUV).a < 0.4) {\n        discard;\n    }\n#endif\n#include<logDepthFragment>\n    fragmentOutputs.color = uniforms.color;\n\n#define CUSTOM_FRAGMENT_MAIN_END\n}\n";t(9610).l.ShadersStoreWGSL[r]=a;const i={name:r,shader:a}},3226:(n,e,t)=>{t(9610).l.IncludesShadersStoreWGSL.logDepthDeclaration="#ifdef LOGARITHMICDEPTH\nuniform logarithmicDepthConstant: f32;varying vFragmentDepth: f32;\n#endif\n"},8780:(n,e,t)=>{t(9610).l.IncludesShadersStoreWGSL.logDepthFragment="#ifdef LOGARITHMICDEPTH\nfragmentOutputs.fragDepth=log2(fragmentInputs.vFragmentDepth)*uniforms.logarithmicDepthConstant*0.5;\n#endif\n"}}]);